<?xml version="1.0"?>
<launch>
    <arg name="launch_hw" default="true" />
    <arg name="sensor_model" description="Pandar64|Pandar40P|PandarXT32|PandarXT32M|PandarAT128|PandarQT64|PandarQT128|Pandar128E4X"/>
    <arg name="return_mode" default="Dual" description="See readme for supported return modes"/>
    <arg name="frame_id"  default="hesai"/>
    <arg name="scan_phase" default="0.0" />

    <arg name="packet_mtu_size" default="1500" description="Packet MTU size"/>
    <arg name="dual_return_distance_threshold" default="0.1" description="Distance threshold of dual return mode"/>

    <arg name="calibration_file" default="$(find-pkg-share nebula_decoders)/calibration/hesai/$(var sensor_model).csv"/>
    <arg name="correction_file" default="$(find-pkg-share nebula_decoders)/calibration/hesai/$(var sensor_model).dat"/>

    <arg name="sensor_ip" default="192.168.1.201" description="Lidar Sensor IP"/>
    <arg name="host_ip" default="255.255.255.255" description="Broadcast IP from Sensor"/>
    <arg name="data_port" default="2368" description="LiDAR Data Port"/>
    <arg name="gnss_port" default="2369" description="LiDAR GNSS Port"/>

    <arg name="rotation_speed" default="600" description="Motor RPM, the sensor's internal spin rate."/>
    <arg name="cloud_min_angle" default="0" description="Field of View, start degrees."/>
    <arg name="cloud_max_angle" default="360" description="Field of View, end degrees."/>
    <arg name="diag_span" default="1000" description="milliseconds"/>

    <arg name="setup_sensor" default="True" description="Enable sensor setup on hw-driver."/>
    <arg name="ptp_profile" default="1588v2" description="1588v2|802.1as|automotive"/>
    <arg name="ptp_domain" default="0" description="PTP Domain [0-127]."/>
    <arg name="ptp_transport_type" default="UDP" description="1588v2 supports 'UDP' or 'L2', other profiles only L2 (HW)"/>
    <arg name="ptp_switch_type" default="TSN" description="For automotive profile,'TSN' or 'NON_TSN'"/>
    <arg name="delay_hw_ms" default="1000" description="hw driver startup delay in milliseconds."/>
    <arg name="delay_monitor_ms" default="2000" description="hw monitor startup delay in milliseconds."/>
    <arg name="retry_hw" default="True" description="hw driver startup retry (false when using pcap)."/>
    <arg name="debug_logging" default="False" description="Launches Monitor/HW Interfaces and calibration acquisition"/>

    <let name="debug_level" value="debug" if="$(eval $(var debug_logging))"/>
    <let name="debug_level" value="info" unless="$(eval $(var debug_logging))"/>

    <node pkg="nebula_ros" exec="hesai_driver_ros_wrapper_node"
          name="hesai_cloud" output="screen" ros_args="--log-level $(var debug_level)">
        <param name="sensor_model" value="$(var sensor_model)"/>
        <param name="return_mode" value="$(var return_mode)"/>
        <param name="frame_id" value="$(var frame_id)"/>
        <param name="scan_phase" value="$(var scan_phase)"/>
        <param name="sensor_ip" value="$(var sensor_ip)"/>
        <param name="calibration_file" value="$(var calibration_file)"/>
        <param name="correction_file" value="$(var correction_file)"/>
        <param name="launch_hw" value="$(var launch_hw)"/>
    </node>
    <group if="$(var launch_hw)">
        <node pkg="nebula_ros" exec="hesai_hw_interface_ros_wrapper_node"
              name="hesai_hw_driver" output="screen" >
            <param name="sensor_model" value="$(var sensor_model)"/>
            <param name="return_mode" value="$(var return_mode)"/>
            <param name="frame_id" value="$(var frame_id)"/>
            <param name="scan_phase" value="$(var scan_phase)"/>
            <param name="sensor_ip" value="$(var sensor_ip)"/>
            <param name="frame_id" value="$(var frame_id)"/>
            <param name="host_ip" value="$(var host_ip)"/>
            <param name="data_port" value="$(var data_port)"/>
            <param name="gnss_port" value="$(var gnss_port)"/>
            <param name="packet_mtu_size" value="$(var packet_mtu_size)"/>
            <param name="rotation_speed" value="$(var rotation_speed)"/>
            <param name="cloud_min_angle" value="$(var cloud_min_angle)"/>
            <param name="cloud_max_angle" value="$(var cloud_max_angle)"/>
            <param name="dual_return_distance_threshold" value="$(var dual_return_distance_threshold)"/>
            <param name="setup_sensor" value="$(var setup_sensor)"/>
            <param name="delay_hw_ms" value="$(var delay_hw_ms)"/>
            <param name="retry_hw" value="$(var retry_hw)"/>
            <param name="ptp_profile" value="$(var ptp_profile)"/>
            <param name="ptp_domain" value="$(var ptp_domain)"/>
            <param name="ptp_transport_type" value="$(var ptp_transport_type)"/>
            <param name="ptp_switch_type" value="$(var ptp_switch_type)"/>
        </node>

        <node pkg="nebula_ros" exec="hesai_hw_monitor_ros_wrapper_node"
              name="hesai_hw_monitor_$(var frame_id)" output="screen">
            <param name="sensor_model" value="$(var sensor_model)"/>
            <param name="return_mode" value="$(var return_mode)"/>
            <param name="frame_id" value="$(var frame_id)"/>
            <param name="scan_phase" value="$(var scan_phase)"/>
            <param name="sensor_ip" value="$(var sensor_ip)"/>
            <param name="frame_id" value="$(var frame_id)"/>
            <param name="host_ip" value="$(var host_ip)"/>
            <param name="data_port" value="$(var data_port)"/>
            <param name="gnss_port" value="$(var gnss_port)"/>
            <param name="packet_mtu_size" value="$(var packet_mtu_size)"/>
            <param name="rotation_speed" value="$(var rotation_speed)"/>
            <param name="cloud_min_angle" value="$(var cloud_min_angle)"/>
            <param name="cloud_max_angle" value="$(var cloud_max_angle)"/>
            <param name="diag_span" value="$(var diag_span)"/>
            <param name="dual_return_distance_threshold" value="$(var dual_return_distance_threshold)"/>
            <param name="delay_monitor_ms" value="$(var delay_monitor_ms)"/>
        </node>
    </group>

</launch>
